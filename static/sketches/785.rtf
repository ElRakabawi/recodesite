{\rtf1\ansi\ansicpg1252\cocoartf1138\cocoasubrtf510
{\fonttbl\f0\fnil\fcharset0 Monaco;}
{\colortbl;\red255\green255\blue255;\red164\green202\blue224;\red0\green0\blue0;}
\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\deftab720
\pard\pardeftab720

\f0\fs24 \cf2 \cb3 /* \\r\\nPart of the ReCode Project (http://recodeproject.com)\\r\\nBased on \\"Hex Variation\\" by William Kolmyjec\\r\\nOriginally published in \\"Computer Graphics and Art\\" vol3 no4, 1978\\r\\nCopyright (c) 2012 Steve Berrick - OSI/MIT license (http://recodeproject/license).\\r\\n*/\\n\\nint _width = 600;\\r\\nint _height = 900;\\r\\nint _size = 20;\'a0 \'a0 \'a0// hexagon radius\\r\\n\\r\\nint mod = 2;\\r\\n\\r\\nvoid setup() \{\\r\\n\'a0\'a0\\r\\n\'a0\'a0size(_width, _height);\\r\\n\'a0\'a0noLoop();\\r\\n\'a0\'a0\\r\\n\'a0\'a0background(255);\\r\\n\'a0\'a0noFill();\\r\\n\'a0\'a0stroke(0);\\r\\n\'a0\'a0strokeWeight(2);\\r\\n\\r\\n\}\\n\\nvoid draw() \{\\r\\n\\r\\n\'a0\'a0// clear background\\r\\n\'a0\'a0background(255);\\r\\n\'a0\'a0\\r\\n\'a0\'a0// line length (hypotenuse)\\r\\n\'a0\'a0float h = sin(THIRD_PI) * _size;\\r\\n\'a0\'a0int r = 0;\\r\\n\'a0\'a0\\r\\n\'a0\'a0for (int i = 0; i <= _width / (_size * 3); i++) \{\\r\\n\'a0 \'a0\'a0for (int j = 0; j <= (_height / h) + 1; j++) \{\\r\\n\\r\\n\'a0 \'a0 \'a0\'a0// reference points (centre of each hexagon)\\r\\n\'a0 \'a0 \'a0\'a0float x = i * _size * 3 + (_size / 2);\\r\\n\'a0 \'a0 \'a0\'a0float y = j * h;\\r\\n\'a0 \'a0 \'a0\'a0// offset each odd row\\r\\n\'a0 \'a0 \'a0\'a0if (j % 2 > 0) \{\\r\\n\'a0 \'a0 \'a0 \'a0\'a0x += _size * 1.5;\\r\\n\'a0 \'a0 \'a0\'a0\}\\r\\n\'a0 \'a0 \'a0\'a0r++;\\r\\n\'a0 \'a0 \'a0\'a0\\r\\n\'a0 \'a0 \'a0\'a0pushMatrix();\\r\\n\'a0 \'a0 \'a0\'a0\\r\\n\'a0 \'a0 \'a0\'a0translate(x, y);\\r\\n\'a0 \'a0 \'a0 \'a0\'a0\\r\\n\'a0 \'a0 \'a0\'a0// random hexagon rotation (0, 120, 240 degrees)\\r\\n\'a0 \'a0 \'a0\'a0rotate(r % mod * THIRD_PI);\\r\\n\'a0 \'a0\'a0\\r\\n\'a0 \'a0 \'a0\'a0// draw line\\r\\n\'a0 \'a0 \'a0\'a0line(0, -h, 0, h);\\r\\n\'a0\'a0\\r\\n\'a0 \'a0 \'a0\'a0// draw arcs\\r\\n\'a0 \'a0 \'a0\'a0arc(-_size, 0, _size, _size, -THIRD_PI,\'a0 \'a0 \'a0THIRD_PI);\\r\\n\'a0 \'a0 \'a0\'a0arc( _size, 0, _size, _size,\'a0\'a0THIRD_PI * 2, THIRD_PI * 4); \\r\\n\'a0 \'a0 \'a0\'a0\\r\\n\'a0 \'a0 \'a0\'a0popMatrix();\\r\\n\\r\\n\'a0 \'a0\'a0\}\'a0\'a0\\r\\n\'a0\'a0\}\\r\\n\\r\\n\}void mousePressed() \{\\r\\n\'a0\'a0\\r\\n\'a0\'a0redraw();\\r\\n\\r\\n\}\\r\\n\\r\\nvoid mouseMoved() \{\\r\\n\'a0 \'a0\\r\\n\'a0\'a0mod = (mouseX % width / (_size * 3)) + 1;\\r\\n\'a0\'a0redraw();\\r\\n\'a0 \'a0\\r\\n\}}